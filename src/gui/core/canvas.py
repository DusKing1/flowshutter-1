# Flowshutter
# Copyright (C) 2021  Hugo Chiang

# Flowshutter is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Flowshutter is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with flowshutter.  If not, see <https://www.gnu.org/licenses/>.
import gui.driver.ssd1306 as ssd1306
from gui.lib.writer import Writer 
import gui.lib.arial10 as a10
import gui.lib.font6 as f6
import gui.lib.font10 as f10
import vram, target
import framebuf, time

class Canvas():
    def __init__(self):
        self.i2c = target.init_i2c()
        self.screen = ssd1306.SSD1306_I2C(128, 32, self.i2c, False)
        self.f6  = Writer(self.screen, f6)
        self.a10 = Writer(self.screen, a10)
        self.f10 = Writer(self.screen, f10)
        self.init_icons()

    def init_icons(self):
        gyroflow_bytearray = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xc0\x00\x00\x00\x00\xf0\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x03@\x00\x00\x00\x01\x98\x01\xc0\x00\x00\x00\x00\x00\x00\x00\x06@\x00\x00\x00\x01\x0c\x01\xe0\x00\x00\x00\x00\x00\x00\x00\x0cA\x80\x00\x00\x03\x06\x03p\x00\x00\x00\x00\x00\x00\x00\x18\xc3\x00\x00\x00\x02\x02G0\x00\x00\x00\x00\x00\x00\x001\x87\x00\x00\x00\x1a\x01\xe68\x00\x00\x00\x00\x00\x00\x00!\x0e\x00\x00\x00r\xc3\xee\x18\x00\x00\x00\x00\x00\x00\x00c\x0c\x00\x00\x00\xc2O|\x1c\x00\x00\x00\x00\x00\x00\x00B\x18\x00\x00\x00\x83<8\x0c\x0f\xe3\x03?\xe0|\x00\xc4\x10\x00\x00\x00\x818\x18\x0e\x1f\xf3\x87?\xf0\xfe\x00\x8c0\x00\x00\x01\xc1\x80\x18\xfe89\xce01\x83\x01\x98`\x00\x00\x01d\x80\x0f\x800\x18\xcc03\x01\x81\xb0\xc0\xff\x80\x016\x80\x0e\x00p\x00x03\x01\x81a\xc1\xe1\x82\x03X\x80\x06\x00p\x00x?\xe3\x01\x83\xc3\x83!\x06\x02l\x00\x07\x00p\xf80?\xc3\x01\x83\xce\x87#\x0e\x06w\x80\x1e\x80p\xf800\xc3\x01\x87\xf8\x86"\x1c\x0c1\xc0x\xc0p\x1800\xe3\x01\x87\x81\x86b4\x188p\xe0@8800q\x83\x0c\x81\x0c\xc3\xe4p\x18>\x00@<x008\xfe\x1c\x81\xbf\x81\x86\xc0\x0c\x07\x90\xc0\x1f\xf000\x18|<\x80\xe2\x00\x03\x80\x0c0\xff\x80\x07\xc0\x00\x00\x00\x00h\x80\x00\x00\x00\x00\x060\x04\x00\x00\x00\x00\x00\x00\x00\x08\x80\x00\x00\x00\x00\x06\x98\x10\x00\x00\x00\x00\x00\x00\x00\x19\x80\x00\x00\x00\x00\x03\x8c\x10\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x01\x060\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00\x03`\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\x00\x00\x00\x01\xc0\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00')
        cam_bytearray = bytearray(b'\x00?\xfc\x00\x00`\x06\x00\x00@\x02\x00\x00@\x1a\x00\x00@\x1a\x00\x00@\x1a\x00\x00@\x02\x00\x00`\x06\x00\x00?\xfc\x00\x18\x0c0\x18<\x04 <f\x0f\xf0f\x7f\xf8\x1f\xfe\xff\xe0\x07\xff\xc0\xc7\xe3\x03\xc1\x9c9\x83\xff1\x8c\xff\xc3`6C\xc2@\x1aK\xc6\xc0\x0bk\xc4\x80\x05#\xc4\x80\x05#\xc4\x80\x01#\xc6\xc0\x03c\xc2@\x02C\xc3`\x06\xc3\xff0\x0c\xff\xc1\x9c9\x83\xc0\xc7\xe3\x03\xff\xe0\x07\xff\x7f\xf8\x1f\xfe\x00\x0f\xf0\x00')
        cam_working_bytearray = bytearray(b'\x00?\xfc\x00\x00\x7f\xfe\x00\x00\x7f\xfe\x00\x00\x7f\xe6\x00\x00\x7f\xe6\x00\x00\x7f\xe6\x00\x00\x7f\xfe\x00\x00\x7f\xfe\x00\x00?\xfc\x00\x18\x0c0\x18<\x04 <f\x0f\xf0f\x7f\xf8\x1f\xfe\xff\xe0\x07\xff\xc0\xc7\xe3\x03\xc1\x9f\xf9\x83\xff>|\xff\xc3\x7f\xceC\xc2\x7f\xe6K\xc6\xff\xf7k\xc4\xff\xfb#\xc4\xff\xfb#\xc4\xff\xff#\xc6\xff\xffc\xc2\x7f\xfeC\xc3\x7f\xfe\xc3\xff?\xfc\xff\xc1\x9f\xf9\x83\xc0\xc7\xe3\x03\xff\xe0\x07\xff\x7f\xf8\x1f\xfe\x00\x0f\xf0\x00')
        wifi_disconnected_bytearray = bytearray(b"~\x00\x00\x06\xff\xe0\x00\x0f\xff\xfc\x00\x1f\xff\xff\x00>\xff\xff\xc0|\xff\xff\xf0\xf8?\xff\xf9\xf0\x00\xff\xf3\xe0\x00\x1f\xe7\xc0\x00\x07\xcf\x80\x00\x01\x9f\x00\x7f\x00>@\xff\xc0|\xe0\xff\xf0\xf9\xe0\xff\xf9\xf3\xf0\xff\xf3\xe7\xf0\xff\xe7\xc7\xf8\x7f\xcf\x83\xf8\x03\x9f\x03\xfc\x00>A\xfc\x00|\xc1\xfc\x00\xf9\xe0\xfe\x01\xf3\xe0\xfe\x03\xe7\xf0\xfe'\xc7\xf0~O\x87\xf8\x7f\x9f\x03\xf8\x7f>\x03\xf8\x7f|\x03\xf8\x7f\xf9\x03\xf8\x7f\xf2\x03\xf8?d\x01\xf0>")
        wifi_connected_bytearray = bytearray(b'~\x00\x00\x00\xff\xe0\x00\x00\xff\xfc\x00\x00\xff\xff\x00\x00\xff\xff\xc0\x00\xff\xff\xf0\x00?\xff\xf8\x00\x00\xff\xfc\x00\x00\x1f\xfe\x00\x00\x07\xff\x00\x00\x01\xff\x80\x7f\x00\xff\xc0\xff\xc0\x7f\xe0\xff\xf0?\xe0\xff\xfc\x1f\xf0\xff\xfe\x0f\xf0\xff\xff\x07\xf8\x7f\xff\x83\xf8\x03\xff\x83\xfc\x01\xff\xc1\xfc\x00\x7f\xc1\xfc\x00?\xe0\xfe\x00\x1f\xe0\xfe\x00\x0f\xf0\xfe<\x07\xf0~~\x07\xf8\x7f\xff\x03\xf8\x7f\xff\x03\xf8\x7f\xff\x03\xf8\x7f\xff\x03\xf8\x7f~\x03\xf8?<\x01\xf0>')
        github_bytearray = bytearray(b'\x01\xc0\x008\x03\xf0\x00\xfc\x03\xf9\xf9\xfc\x03?\xff\xcc\x03\x0f\x0f\x0c\x03\x8c\x03\x1c\x03\x80\x00\x1c\x03\x80\x00\x1c\x07\x00\x00\x1e\x07\x00\x00\x0e\x0e\x00\x00\x0f\x0e\x00\x00\x07\x0e\x00\x00\x07\x0e\x00\x00\x07\x0e\x00\x00\x07\x0e\x00\x00\x07\x0f\x00\x00\x0e\x0f\x00\x00\x0e\x07\x80\x00\x1e\x03\xc0\x00<\x03\xf0\x00\xf8\xc1\xff\x0f\xf0\xf0\x7f\x0f\xe0\xf8\x0f\x0f\x00|\x0e\x07\x00\x1e\x0e\x07\x00\x0f\x9e\x07\x80\x07\xfe\x07\x80\x01\xfe\x07\x80\x00~\x07\x80\x00\x1e\x07\x80\x00\x0c\x03\x00')
        gitee_bytearray = bytearray(b'\x00\x7f\xff\xfe\x01\xff\xff\xff\x07\xff\xff\xff\x0f\xff\xff\xff\x1f\xff\xff\xff?\xff\xff\xff?\xff\xff\xfe\x7f\xc0\x00\x00\x7f\x80\x00\x00\xff\x00\x00\x00\xfe\x00\x00\x00\xfe\x00\x00\x00\xfe\x00\x00\x00\xfe\x07\xff\xfe\xfe\x0f\xff\xff\xfe\x0f\xff\xff\xfe\x0f\xff\xff\xfe\x0f\xff\xff\xfe\x07\xff\xff\xfe\x00\x00\xff\xfe\x00\x00\x7f\xfe\x00\x00\x7f\xfe\x00\x00\x7f\xfe\x00\x00\xff\xff\x00\x01\xfe\xff\xff\xff\xfe\xff\xff\xff\xfc\xff\xff\xff\xf8\xff\xff\xff\xf0\xff\xff\xff\xe0\x7f\xff\xff\xc0?\xff\xff\x00')
        settings_bytearray = bytearray(b'\x00\x07\xe0\x00\x00\x04 \x00\x02\x04 @\x07\x0c0\xe0\r\xbc=\xb0\x18\xe0\x07\x180\x00\x00\x0c\x18\x00\x00\x18\x0c\x00\x000\x04\x00\x00 \x0c\x03\xc00\x08\x0c0\x10\x18\x18\x18\x18\xf8\x10\x08\x1f\x80 \x04\x01\x80 \x04\x01\x80 \x04\x01\x80 \x04\x01\xf8\x10\x08\x1f\x18\x18\x18\x18\x08\x0c0\x10\x0c\x03\xc00\x04\x00\x00 \x0c\x00\x000\x18\x00\x00\x180\x00\x00\x0c\x18\xe0\x07\x18\r\xb0\r\xb0\x07\x1c8\xe0\x02\x0c0@\x00\x04 \x00\x00\x07\xe0\x00')
        audio_off_bytearray = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdb\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdb\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdb\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdb\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdb\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        audio_on_bytearray = bytearray(b'\x18\x000\x00`\x00\xc0\x01\x80\x03\x00\x06\x00\x0c\x00\x18\x18\x000\x00`\x00\xc0\x01\x80\x03\x00\x06\x00\x0c\x00\x18\x18\x000\x00`\x00\xc0\x01\x80\x03\x00\x06\x00\x0c\x00\x18\x18\x000\x00`\x00\xc0\x01\x80\x03\x00\x06\x00\x0c\x00\x18\xdb\x01\xb6\x03l\x06\xd8\r\xb0\x1b`6\xc0m\x80\xdb\xdb\x01\xb6\x03l\x06\xd8\r\xb0\x1b`6\xc0m\x80\xdb\xdb\x01\xb6\x03l\x06\xd8\r\xb0\x1b`6\xc0m\x80\xdb\xdb\x01\xb6\x03l\x06\xd8\r\xb0\x1b`6\xc0m\x80\xdb\xdb\x01\xb6\x03l\x06\xd8\r\xb0\x1b`6\xc0m\x80\xdb\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdb\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdb\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdb\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdb\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdb\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdbm\xb6\xdb\xdb\x01\xb6\x03l\x06\xd8\r\xb0\x1b`6\xc0m\x80\xdb\xdb\x01\xb6\x03l\x06\xd8\r\xb0\x1b`6\xc0m\x80\xdb\xdb\x01\xb6\x03l\x06\xd8\r\xb0\x1b`6\xc0m\x80\xdb\xdb\x01\xb6\x03l\x06\xd8\r\xb0\x1b`6\xc0m\x80\xdb\xdb\x01\xb6\x03l\x06\xd8\r\xb0\x1b`6\xc0m\x80\xdb\x18\x000\x00`\x00\xc0\x01\x80\x03\x00\x06\x00\x0c\x00\x18\x18\x000\x00`\x00\xc0\x01\x80\x03\x00\x06\x00\x0c\x00\x18\x18\x000\x00`\x00\xc0\x01\x80\x03\x00\x06\x00\x0c\x00\x18\x18\x000\x00`\x00\xc0\x01\x80\x03\x00\x06\x00\x0c\x00\x18')
        blackbox_bytearray = bytearray(b'\x00\x00\x00\x00\x00?\xff\xf0\x00\x7f\xff\xf0\x00`\x000\x01\xff\xff\xb0\x03\xff\xff\xb0\x03\x00\x01\xb0\x03\x03\xfd\xb0\x03\x00\x01\xb0\x03\x03\xfd\xb0\x00\x00\x01\xb0?\xf3\xfd\xb0\x7f\xfb\xfd\xb0\x7f\xfc\x00\x00\x7f\xff\xff\xfc\x7f\xff\xff\xfe\x7f\xff\xff\xfe\x7f\xff\xff\xfe\x7f\xff\xff\xfe\x7f\xff\xff\xfe\x7f\xff\xff\xfe\x7f\xff\xff\xfe\x7f\xff\xff\xfe\x7f\xff\xff\xfe\x7f\xff\xff\xfe\x7f\xff\xff\xfe\x7f\xff\xff\xfe\x7f\xff\xff\xfe\x7f\xff\xff\xfe\x7f\xff\xff\xfe?\xff\xff\xfc\x00\x00\x00\x00')
        battery_bytearray = bytearray(b'\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfc\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfc\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00<\x00\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\xe3\xff\xff\x0f\xff\xfc?\xff\xf0\xff\xff\xc3\xff\xff\x1c\x00\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9c\x00\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9f\xfe\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9f\xff\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9f\xff\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9f\xff\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9f\xff\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9f\xff\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9f\xff\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9f\xff\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9f\xff\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9f\xff\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9f\xff\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9f\xff\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9f\xff\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9f\xff\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9f\xff\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9f\xff\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9f\xff\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9f\xfe\xe7\xff\xff\x9f\xff\xfe\x7f\xff\xf9\xff\xff\xe7\xff\xff\x9c\x00\xe3\xff\xff\x0f\xff\xfc?\xff\xf0\xff\xff\xc3\xff\xff\x1c\x00\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00<\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfc\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfc\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf8\x00')
        self.gyroflow_fb = framebuf.FrameBuffer(gyroflow_bytearray, 128,28, framebuf.MONO_HLSB)
        self.cam_fb = framebuf.FrameBuffer(cam_bytearray, 32,32, framebuf.MONO_HLSB)
        self.cam_working_fb = framebuf.FrameBuffer(cam_working_bytearray, 32,32, framebuf.MONO_HLSB)
        self.wifi_connected_fb = framebuf.FrameBuffer(wifi_disconnected_bytearray, 32,32, framebuf.MONO_HLSB)
        self.wifi_connected_fb = framebuf.FrameBuffer(wifi_connected_bytearray, 32,32, framebuf.MONO_HLSB)
        self.github_fb = framebuf.FrameBuffer(github_bytearray, 32,32, framebuf.MONO_HLSB)
        self.gitee_fb = framebuf.FrameBuffer(gitee_bytearray, 32,32, framebuf.MONO_HLSB)
        self.settings_fb = framebuf.FrameBuffer(settings_bytearray, 32,32, framebuf.MONO_HLSB)
        self.audio_off_fb = framebuf.FrameBuffer(audio_off_bytearray, 128,24, framebuf.MONO_HLSB)
        self.audio_on_fb = framebuf.FrameBuffer(audio_on_bytearray, 128,24, framebuf.MONO_HLSB)
        self.blackbox_fb = framebuf.FrameBuffer(blackbox_bytearray, 32,32, framebuf.MONO_HLSB)
        self.battery_fb = framebuf.FrameBuffer(battery_bytearray, 128,32, framebuf.MONO_HLSB)

    def show_sub(self, i):
        self.screen.show_sub(i)  

    def show_all(self):
        self.screen.show_all()

    def update(self, info, sub_state, sub_menu, sub_hint):
        if info == "welcome":
            self.display_welcome()
        elif info == "home":
            self.display_state(sub_state)
        elif info == "battery_info":
            self.display_battery()
        elif info == "menu":
            self.display_menu(sub_menu)
        elif info == 'hint':
            self.display_hint(sub_hint)

        else:
            print(str(time.ticks_us()) + " [ Error] Unkown info: " + info)

    def draw_batterymask(self, voltage):

        bat_usage = int(100*(4.2 - voltage))
        # % of the battery usage

        if (bat_usage >= 0) & (bat_usage < 20):
            self.screen.pixel(112-bat_usage,5,0)
            self.screen.pixel(112-bat_usage,26,0)
            self.screen.fill_rect(113-bat_usage,5,bat_usage,22,0)
        elif (bat_usage >= 20) & (bat_usage < 40):
            self.screen.fill_rect(93,5,20,22,0)
            self.screen.pixel(110-bat_usage,5,0)
            self.screen.pixel(110-bat_usage,26,0)
            self.screen.fill_rect(111-bat_usage,5,bat_usage,22,0)
        elif (bat_usage >= 40) & (bat_usage < 60):
            self.screen.fill_rect(93,5,20,22,0)
            self.screen.pixel(108-bat_usage,5,0)
            self.screen.pixel(108-bat_usage,26,0)
            self.screen.fill_rect(109-bat_usage,5,bat_usage,22,0)
        elif (bat_usage >= 60) & (bat_usage < 80):
            self.screen.fill_rect(93,5,20,22,0)
            self.screen.pixel(106-bat_usage,5,0)
            self.screen.pixel(106-bat_usage,26,0)
            self.screen.fill_rect(107-bat_usage,5,bat_usage,22,0)
        elif (bat_usage >= 80) & (bat_usage < 100):
            self.screen.fill_rect(93,5,20,22,0)
            self.screen.pixel(104-bat_usage,5,0)
            self.screen.pixel(104-bat_usage,26,0)
            self.screen.fill_rect(105-bat_usage,5,bat_usage,22,0)
        elif (bat_usage>=100): # more than 100%
            self.screen.fill_rect(5,5,108,22,0)
        # else: # less than 0%, then do nothing

    def display_welcome(self):
        self.screen.fill(0)
        self.screen.blit(self.gyroflow_fb, 0, 2)
        # screen.invert(1)
        self.screen.show()

    def display_state(self, state):
        if state == 'HOME':
            fb, header, content1, content2, content3 = self.cam_fb, 'Flowshutter', 'Powered by', 'DusKing', ''.join(tuple(vram.version))
        elif state == 'STARTING':
            fb, header, content1, content2, content3 = self.cam_fb, 'Starting', 'FC Disarmed', 'Camera start', ''
        elif state == 'RECORDING':
            fb, header, content1, content2, content3 = self.cam_working_fb, 'Flowshutter', 'FC Armed', 'Recording', ''
        elif state == 'STOPPING':
            fb, header, content1, content2, content3 = self.cam_working_fb, 'Stopping', 'FC Armed', 'Camera stop', ''
        else:
            print('Unkown state: ' + state)
        self.screen.fill(0)
        self.screen.blit(fb, 0, 0)
        self.screen.text(header, 34, 0, 1)
        self.screen.text(content1, 34, 12, 1)
        self.screen.text(content2, 34, 24, 1)
        self.screen.text(content3, 94, 24, 1)
        self.screen.show()

    def display_battery(self):
        self.screen.blit(self.battery_fb, 0, 0)
        self.draw_batterymask(vram.vol)
        voltage_str = "%.2fV" % vram.vol
        for i in range(5):
            for j in range(5):
                self.screen.text(voltage_str,42+i, 11+j,0)
        self.screen.text(voltage_str,44,13,1)
        self.screen.show()

    def display_menu(self, sub_cat):
        if sub_cat == 'camera_protocol':
            index, head, content, fb = 1, 'Camera Protocol',''.join(tuple(vram.camera_protocol)),               self.settings_fb
        elif sub_cat == 'device_mode':
            index, head, content, fb = 2, 'Device Mode',    ''.join(tuple(vram.device_mode)),                   self.settings_fb
        elif sub_cat == 'inject_mode':
            index, head, content, fb = 3, 'Audio Injection',''.join(tuple(vram.inject_mode)),                   (self.audio_on_fb if vram.inject_mode == "ON" else self.audio_off_fb)
        elif sub_cat == 'erase_blackbox':
            index, head, content, fb = 4, 'Blackbox Erase', ('Erasing...' if vram.erase_flag else 'Erase stop'),self.blackbox_fb
        elif sub_cat == 'internet':
            index, head, content, fb = 5, 'Internet',       ''.join(tuple(vram.wlan_state)),                    (self.self.wifi_connected_fb if vram.wlan_state == "CONNECTED" else self.self.wifi_disconnected_fb)
        elif sub_cat == 'ota_source':
            index, head, content, fb = 6, 'OTA Source',     ''.join(tuple(vram.ota_source)),                    (self.github_fb if vram.ota_source == "GitHub" else self.gitee_fb)
        elif sub_cat == 'ota_channel':
            index, head, content, fb = 7, 'OTA Channel',    ''.join(tuple(vram.ota_channel)),                   self.settings_fb
        elif sub_cat == 'ota_check':
            index, head, content, fb = 8, 'OTA Check',      "".join(tuple(vram.ota_source))+"/"+"".join(tuple(vram.ota_channel)),self.settings_fb
        elif sub_cat == 'ota_update':
            index, head, content, fb = 9, 'OTA Update',     'ENT = START',                                      self.settings_fb
        else:
            print('Unknown sub_menu:', sub_cat)
        self.screen.fill(0)
        self.screen.blit(fb, 95, 0)
        self.a10.set_textpos(self.screen,0,0)
        self.a10.printstring(head)
        self.screen.hline(0,10,94,1)
        self.screen.text(content, 0, 14, 1)
        self.screen.text('<<  '+str(index)+'/4   >>', 0, 24, 1)
        self.screen.show()

    def display_hint(self, sub_hint):
        self.screen.fill(0)
        self.screen.fill_rect(2,1,124,30,1)
        self.screen.fill_rect(6,4,116,24,0)
        if sub_hint == 'REBOOT':
            self.screen.text('Please reboot', 9, 6, 1)
            self.screen.text('to apply', 32, 16, 1)
        elif sub_hint == 'SONY_MTP_ACK':
            self.screen.text('SONY Remote', 21, 6, 1)
            self.screen.text('Registered', 21, 16, 1)
        elif sub_hint == 'STARTING_TIMEOUT':
            self.screen.text('No ACK back', 17, 6, 1)
            self.screen.text('Start failed', 17, 16, 1)
        elif sub_hint == 'AP_HINT':
            self.screen.text('SSID:'+ 'Flowshutter', 3, 6, 1)
            self.screen.text('Pswd:'+ 'ilovehugo', 3, 16, 1)
        elif sub_hint == 'WLAN_CONNECTING':
            self.screen.text('Connecting', 21, 6, 1)
            self.screen.text('Please wait', 21, 16, 1)
        elif sub_hint == 'SETTINGS_FAULT':
            self.screen.text('Settings Fault', 26, 8, 1)
            self.screen.text('Please Reboot', 26, 20, 1)
        self.screen.show()
